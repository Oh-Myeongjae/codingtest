/*
문제
도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.

도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.

C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.

입력
첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.

출력
첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.
*/
java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        // 집의 개수 N과 공유기의 개수 C 입력 받기
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int C = Integer.parseInt(st.nextToken());

        // 집의 좌표 입력 받기
        int[] houses = new int[N];
        for (int i = 0; i < N; i++) {
            houses[i] = Integer.parseInt(br.readLine());
        }

        // 집의 좌표 정렬
        Arrays.sort(houses);

        // 이분 탐색을 위한 시작점과 끝점 설정
        int start = 1; // 가능한 최소 거리
        int end = houses[N - 1] - houses[0]; // 가능한 최대 거리
        int result = 0;

        // 이분 탐색 진행
        while (start <= end) {
            int mid = (start + end) / 2; // 현재 탐색할 거리

            // 첫 번째 집에는 반드시 공유기를 설치한다고 가정
            int installed = 1;
            int prevHouse = houses[0];

            // 공유기를 설치할 수 있는지 확인
            for (int i = 1; i < N; i++) {
                int distance = houses[i] - prevHouse; // 이전 집과의 거리
                if (distance >= mid) {
                    installed++; // 공유기 설치
                    prevHouse = houses[i]; // 이전 집 갱신
                }
            }

            // 설치한 공유기의 수가 목표보다 많으면 간격을 늘려서 더 설치할 수 있는지 확인
            if (installed >= C) {
                result = mid; // 가능한 최대 거리 갱신
                start = mid + 1; // 더 큰 간격 확인을 위해 시작점을 늘림
            } else {
                end = mid - 1; // 간격을 줄여서 더 많이 설치할 수 있게 함
            }
        }

        bw.write(result + "\n");

        br.close();
        bw.close();
    }
}
