/*
문제
N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오.

입력
첫째 줄에 자연수 N(1 ≤ N ≤ 100,000)이 주어진다. 다음 줄에는 N개의 정수 A[1], A[2], …, A[N]이 주어진다. 다음 줄에는 M(1 ≤ M ≤ 100,000)이 주어진다. 다음 줄에는 M개의 수들이 주어지는데, 이 수들이 A안에 존재하는지 알아내면 된다. 모든 정수의 범위는 -231 보다 크거나 같고 231보다 작다.

출력
M개의 줄에 답을 출력한다. 존재하면 1을, 존재하지 않으면 0을 출력한다.
*/
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        // 배열의 크기와 배열 입력 받기
        int N = Integer.parseInt(br.readLine());
        int[] array = new int[N];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            array[i] = Integer.parseInt(st.nextToken());
        }

        // 배열 정렬
        Arrays.sort(array);

        // 검사할 수의 개수와 수들 입력 받기
        int M = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());

        // 각 수에 대해 이분 탐색을 통해 존재 여부 확인하여 출력
        for (int i = 0; i < M; i++) {
            int target = Integer.parseInt(st.nextToken());
            int result = binarySearch(array, target) ? 1 : 0;
            bw.write(result + "\n");
        }

        br.close();
        bw.close();
    }

    // 이분 탐색을 사용하여 배열에서 target 값이 존재하는지 확인하는 메서드
    private static boolean binarySearch(int[] array, int target) {
        int left = 0;
        int right = array.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (array[mid] == target) {
                return true; // 탐색 성공
            } else if (array[mid] < target) {
                left = mid + 1; // 오른쪽 부분 배열 탐색
            } else {
                right = mid - 1; // 왼쪽 부분 배열 탐색
            }
        }

        return false; // 탐색 실패
    }
}
