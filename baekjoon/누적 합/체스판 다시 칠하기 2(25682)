/*
문제
지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 K×K 크기의 체스판으로 만들려고 한다.

체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.

보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 K×K 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 K×K 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 정수 N, M, K가 주어진다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.

출력
첫째 줄에 지민이가 잘라낸 K×K 보드를 체스판으로 만들기 위해 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.

제한
1 ≤ N, M ≤ 2000
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // 첫째 줄에 N, M, K가 주어진다.
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());
        
        // 보드의 각 행의 상태를 저장할 2차원 배열
        char[][] board = new char[N][M];
        for (int i = 0; i < N; i++) {
            board[i] = br.readLine().toCharArray();
        }
        
        // 두 가지 색칠 패턴에 따른 필요한 변경 개수의 누적합 배열
        int[][][] prefixSum = new int[2][N + 1][M + 1];
        
        // 각 위치의 칸이 두 가지 패턴 중에서 몇 개가 잘못된 칸인지 계산
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                // 체스판 패턴1: 왼쪽 위가 흰색(W)
                if ((i + j) % 2 == 0) {
                    prefixSum[0][i + 1][j + 1] = board[i][j] == 'B' ? 1 : 0;
                } else {
                    prefixSum[0][i + 1][j + 1] = board[i][j] == 'W' ? 1 : 0;
                }
                // 체스판 패턴2: 왼쪽 위가 검은색(B)
                if ((i + j) % 2 == 0) {
                    prefixSum[1][i + 1][j + 1] = board[i][j] == 'W' ? 1 : 0;
                } else {
                    prefixSum[1][i + 1][j + 1] = board[i][j] == 'B' ? 1 : 0;
                }
            }
        }
        
        // 누적합 계산
        for (int p = 0; p < 2; p++) {
            for (int i = 1; i <= N; i++) {
                for (int j = 1; j <= M; j++) {
                    prefixSum[p][i][j] += prefixSum[p][i - 1][j] + prefixSum[p][i][j - 1] - prefixSum[p][i - 1][j - 1];
                }
            }
        }
        
        // KxK 크기의 체스판을 찾으면서 최소 칠하기 횟수 찾기
        int minRepaints = Integer.MAX_VALUE;
        for (int i = K; i <= N; i++) {
            for (int j = K; j <= M; j++) {
                // 패턴1 기준 다시 칠해야 하는 개수
                int repaints1 = prefixSum[0][i][j] - prefixSum[0][i - K][j] - prefixSum[0][i][j - K] + prefixSum[0][i - K][j - K];
                // 패턴2 기준 다시 칠해야 하는 개수
                int repaints2 = prefixSum[1][i][j] - prefixSum[1][i - K][j] - prefixSum[1][i][j - K] + prefixSum[1][i - K][j - K];
                
                // 두 패턴 중 최소 칠하기 횟수 갱신
                minRepaints = Math.min(minRepaints, Math.min(repaints1, repaints2));
            }
        }
        
        // 결과 출력
        System.out.println(minRepaints);
    }
}
