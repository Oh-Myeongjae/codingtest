/*
문제
두 마리의 백조가 호수에서 살고 있었다. 그렇지만 두 마리는 호수를 덮고 있는 빙판으로 만나지 못한다.

호수는 행이 R개, 열이 C개인 직사각형 모양이다. 어떤 칸은 얼음으로 덮여있다.

호수는 차례로 녹는데, 매일 물 공간과 접촉한 모든 빙판 공간은 녹는다. 두 개의 공간이 접촉하려면 가로나 세로로 닿아 있는 것만 (대각선은 고려하지 않는다) 생각한다.

아래에는 세 가지 예가 있다.

...XXXXXX..XX.XXX ....XXXX.......XX .....XX.......... 
....XXXXXXXXX.XXX .....XXXX..X..... ......X.......... 
...XXXXXXXXXXXX.. ....XXX..XXXX.... .....X.....X..... 
..XXXXX..XXXXXX.. ...XXX....XXXX... ....X......XX.... 
.XXXXXX..XXXXXX.. ..XXXX....XXXX... ...XX......XX.... 
XXXXXXX...XXXX... ..XXXX.....XX.... ....X............ 
..XXXXX...XXX.... ....XX.....X..... ................. 
....XXXXX.XXX.... .....XX....X..... ................. 
      처음               첫째 날             둘째 날
백조는 오직 물 공간에서 세로나 가로로만(대각선은 제외한다) 움직일 수 있다.

며칠이 지나야 백조들이 만날 수 있는 지 계산하는 프로그램을 작성하시오.

입력
입력의 첫째 줄에는 R과 C가 주어진다. 단, 1 ≤ R, C ≤ 1500.

다음 R개의 줄에는 각각 길이 C의 문자열이 하나씩 주어진다. '.'은 물 공간, 'X'는 빙판 공간, 'L'은 백조가 있는 공간으로 나타낸다.

출력
첫째 줄에 문제에서 주어진 걸리는 날을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int R, C;
    static char[][] lake;
    static boolean[][] visited;
    static Queue<int[]> waterQueue = new LinkedList<>();
    static Queue<int[]> nextWaterQueue = new LinkedList<>();
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    static boolean[][] swanVisited;
    static Queue<int[]> swanQueue = new LinkedList<>();
    static int[] swanPos;

    // BFS for water melting
    static void melt() {
        while (!waterQueue.isEmpty()) {
            int[] pos = waterQueue.poll();
            for (int d = 0; d < 4; d++) {
                int nx = pos[0] + dx[d];
                int ny = pos[1] + dy[d];
                if (nx >= 0 && nx < R && ny >= 0 && ny < C && lake[nx][ny] == 'X') {
                    lake[nx][ny] = '.';  // Melt ice
                    nextWaterQueue.add(new int[]{nx, ny});
                }
            }
        }
    }

    // BFS to check if swans can meet
    static boolean canSwansMeet() {
        Queue<int[]> nextSwanQueue = new LinkedList<>();
        while (!swanQueue.isEmpty()) {
            int[] pos = swanQueue.poll();
            for (int d = 0; d < 4; d++) {
                int nx = pos[0] + dx[d];
                int ny = pos[1] + dy[d];
                if (nx >= 0 && nx < R && ny >= 0 && ny < C && !swanVisited[nx][ny]) {
                    swanVisited[nx][ny] = true;
                    if (lake[nx][ny] == 'L') {
                        return true;
                    }
                    if (lake[nx][ny] == '.') {
                        swanQueue.add(new int[]{nx, ny});
                    } else {
                        nextSwanQueue.add(new int[]{nx, ny});
                    }
                }
            }
        }
        swanQueue = nextSwanQueue;
        return false;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        lake = new char[R][C];
        visited = new boolean[R][C];
        swanVisited = new boolean[R][C];

        int swanCount = 0;
        for (int i = 0; i < R; i++) {
            lake[i] = br.readLine().toCharArray();
            for (int j = 0; j < C; j++) {
                if (lake[i][j] != 'X') {
                    waterQueue.add(new int[]{i, j});
                    visited[i][j] = true;
                }
                if (lake[i][j] == 'L') {
                    if (swanCount == 0) {
                        swanQueue.add(new int[]{i, j});
                        swanVisited[i][j] = true;
                        swanPos = new int[]{i, j};
                        swanCount++;
                    }
                }
            }
        }

        int days = 0;
        while (true) {
            if (canSwansMeet()) {
                System.out.println(days);
                break;
            }
            melt();
            waterQueue = nextWaterQueue;
            nextWaterQueue = new LinkedList<>();
            days++;
        }
    }
}
