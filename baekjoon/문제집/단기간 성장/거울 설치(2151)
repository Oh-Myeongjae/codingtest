/*
문제
채영이는 거울을 들여다보는 것을 참 좋아한다. 그래서 집 곳곳에 거울을 설치해두고 집 안을 돌아다닐 때마다 거울을 보곤 한다.

채영이는 새 해를 맞이하여 이사를 하게 되었는데, 거울을 좋아하는 그녀의 성격 때문에 새 집에도 거울을 매달만한 위치가 여러 곳 있다. 또한 채영이네 새 집에는 문이 두 개 있는데, 채영이는 거울을 잘 설치하여 장난을 치고 싶어졌다. 즉, 한 쪽 문에서 다른 쪽 문을 볼 수 있도록 거울을 설치하고 싶어졌다.

채영이네 집에 대한 정보가 주어졌을 때, 한 쪽 문에서 다른 쪽 문을 볼 수 있도록 하기 위해 설치해야 하는 거울의 최소 개수를 구하는 프로그램을 작성하시오.

거울을 설치할 때에는 45도 기울어진 대각선 방향으로 설치해야 한다. 또한 모든 거울은 양면 거울이기 때문에 양 쪽 모두에서 반사가 일어날 수 있다. 채영이는 거울을 매우 많이 가지고 있어서 거울이 부족한 경우는 없다고 하자.

거울을 어떻게 설치해도 한 쪽 문에서 다른 쪽 문을 볼 수 없는 경우는 주어지지 않는다.

입력
첫째 줄에 집의 크기 N (2 ≤ N ≤ 50)이 주어진다. 다음 N개의 줄에는 N개의 문자로 집에 대한 정보가 주어진다. ‘#’는 문이 설치된 곳으로 항상 두 곳이며, ‘.’은 아무 것도 없는 것으로 빛은 이 곳을 통과한다. ‘!’은 거울을 설치할 수 있는 위치를 나타내고, ‘*’은 빛이 통과할 수 없는 벽을 나타낸다.

출력
첫째 줄에 설치해야 할 거울의 최소 개수를 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static class Point {
        int x, y, dir, mirrors;

        public Point(int x, int y, int dir, int mirrors) {
            this.x = x;
            this.y = y;
            this.dir = dir;
            this.mirrors = mirrors;
        }
    }

    static int N;
    static char[][] house;
    static int[][][] visited;
    static int[] dx = {-1, 1, 0, 0}; // 상, 하, 좌, 우
    static int[] dy = {0, 0, -1, 1}; // 상, 하, 좌, 우
    static List<int[]> doors = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        house = new char[N][N];
        visited = new int[N][N][4];

        for (int i = 0; i < N; i++) {
            house[i] = br.readLine().toCharArray();
            for (int j = 0; j < N; j++) {
                if (house[i][j] == '#') {
                    doors.add(new int[]{i, j});
                }
                Arrays.fill(visited[i][j], Integer.MAX_VALUE);
            }
        }

        int result = bfs();
        System.out.println(result);
    }

    static int bfs() {
        Queue<Point> queue = new LinkedList<>();
        int startX = doors.get(0)[0], startY = doors.get(0)[1];
        int endX = doors.get(1)[0], endY = doors.get(1)[1];

        for (int i = 0; i < 4; i++) {
            queue.offer(new Point(startX, startY, i, 0));
            visited[startX][startY][i] = 0;
        }

        while (!queue.isEmpty()) {
            Point current = queue.poll();

            if (current.x == endX && current.y == endY) {
                return current.mirrors;
            }

            int nx = current.x + dx[current.dir];
            int ny = current.y + dy[current.dir];

            while (isValid(nx, ny) && house[nx][ny] != '*') {
                if (visited[nx][ny][current.dir] > current.mirrors) {
                    visited[nx][ny][current.dir] = current.mirrors;
                    queue.offer(new Point(nx, ny, current.dir, current.mirrors));
                }

                if (house[nx][ny] == '!') {
                    for (int d = 0; d < 4; d++) {
                        if (d != current.dir && visited[nx][ny][d] > current.mirrors + 1) {
                            visited[nx][ny][d] = current.mirrors + 1;
                            queue.offer(new Point(nx, ny, d, current.mirrors + 1));
                        }
                    }
                }

                nx += dx[current.dir];
                ny += dy[current.dir];
            }
        }

        return -1;
    }

    static boolean isValid(int x, int y) {
        return x >= 0 && x < N && y >= 0 && y < N;
    }
}
