/*
문제
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 한 칸에서 다른 칸으로 이동하려면, 두 칸이 인접해야 한다. 두 칸이 변을 공유할 때, 인접하다고 한다.

각각의 벽에 대해서 다음을 구해보려고 한다.

벽을 부수고 이동할 수 있는 곳으로 변경한다.
그 위치에서 이동할 수 있는 칸의 개수를 세어본다.
한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.

입력
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다.

출력
맵의 형태로 정답을 출력한다. 원래 빈 칸인 곳은 0을 출력하고, 벽인 곳은 이동할 수 있는 칸의 개수를 10으로 나눈 나머지를 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int N, M;
    static int[][] map, groupMap;
    static int[] groupSize;
    static boolean[][] visited;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        
        map = new int[N][M];
        groupMap = new int[N][M];
        visited = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            String line = br.readLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = line.charAt(j) - '0';
            }
        }

        // 1. 빈칸(0)끼리 그룹을 만들고, 각 그룹의 크기를 저장
        int groupId = 1;
        List<Integer> sizes = new ArrayList<>();
        sizes.add(0); // groupId는 1부터 시작하므로, 0번 인덱스는 더미

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 0 && !visited[i][j]) {
                    int size = bfs(i, j, groupId);
                    sizes.add(size);
                    groupId++;
                }
            }
        }

        groupSize = sizes.stream().mapToInt(i -> i).toArray();

        // 2. 벽(1)에서 이동 가능한 칸 계산
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 1) {
                    sb.append(calculateAccessible(i, j));
                } else {
                    sb.append(0);
                }
            }
            sb.append("\n");
        }

        System.out.print(sb.toString());
    }

    // BFS를 사용하여 그룹을 만들고 크기를 반환
    static int bfs(int r, int c, int groupId) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{r, c});
        visited[r][c] = true;
        groupMap[r][c] = groupId;
        
        int size = 1;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int cr = cur[0], cc = cur[1];

            for (int d = 0; d < 4; d++) {
                int nr = cr + dr[d];
                int nc = cc + dc[d];

                if (nr >= 0 && nr < N && nc >= 0 && nc < M && !visited[nr][nc] && map[nr][nc] == 0) {
                    visited[nr][nc] = true;
                    groupMap[nr][nc] = groupId;
                    queue.offer(new int[]{nr, nc});
                    size++;
                }
            }
        }
        return size;
    }

    // 벽(1)을 부쉈을 때 이동할 수 있는 칸 수 계산
    static int calculateAccessible(int r, int c) {
        Set<Integer> seenGroups = new HashSet<>();
        int total = 1; // 자기 자신 포함

        for (int d = 0; d < 4; d++) {
            int nr = r + dr[d];
            int nc = c + dc[d];

            if (nr >= 0 && nr < N && nc >= 0 && nc < M && map[nr][nc] == 0) {
                int groupId = groupMap[nr][nc];
                if (!seenGroups.contains(groupId)) {
                    seenGroups.add(groupId);
                    total += groupSize[groupId];
                }
            }
        }
        return total % 10;
    }
}
