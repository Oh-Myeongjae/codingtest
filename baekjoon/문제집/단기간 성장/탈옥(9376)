/*
문제
상근이는 감옥에서 죄수 두 명을 탈옥시켜야 한다. 이 감옥은 1층짜리 건물이고, 상근이는 방금 평면도를 얻었다.

평면도에는 모든 벽과 문이 나타나있고, 탈옥시켜야 하는 죄수의 위치도 나타나 있다. 감옥은 무인 감옥으로 죄수 두 명이 감옥에 있는 유일한 사람이다.

문은 중앙 제어실에서만 열 수 있다. 상근이는 특별한 기술을 이용해 제어실을 통하지 않고 문을 열려고 한다. 하지만, 문을 열려면 시간이 매우 많이 걸린다. 두 죄수를 탈옥시키기 위해서 열어야 하는 문의 개수를 구하는 프로그램을 작성하시오. 문을 한 번 열면 계속 열린 상태로 있는다.

입력
첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스의 수는 100개를 넘지 않는다.

첫째 줄에는 평면도의 높이 h와 너비 w가 주어진다. (2 ≤ h, w ≤ 100) 다음 h개 줄에는 감옥의 평면도 정보가 주어지며, 빈 공간은 '.', 지나갈 수 없는 벽은 '*', 문은 '#', 죄수의 위치는 '$'이다.

상근이는 감옥 밖을 자유롭게 이동할 수 있고, 평면도에 표시된 죄수의 수는 항상 두 명이다. 각 죄수와 감옥의 바깥을 연결하는 경로가 항상 존재하는 경우만 입력으로 주어진다.

출력
각 테스트 케이스마다 두 죄수를 탈옥시키기 위해서 열어야 하는 문의 최솟값을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int h, w;
    static char[][] map;
    static int[][][] dist;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        int t = Integer.parseInt(br.readLine());

        while (t-- > 0) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            h = Integer.parseInt(st.nextToken());
            w = Integer.parseInt(st.nextToken());

            map = new char[h + 2][w + 2];
            dist = new int[3][h + 2][w + 2];

            for (int i = 0; i < h + 2; i++) {
                Arrays.fill(map[i], '.');
                for (int j = 0; j < w + 2; j++) {
                    Arrays.fill(dist[0][i], Integer.MAX_VALUE);
                    Arrays.fill(dist[1][i], Integer.MAX_VALUE);
                    Arrays.fill(dist[2][i], Integer.MAX_VALUE);
                }
            }

            int prisonerIndex = 0;
            List<int[]> prisoners = new ArrayList<>();

            for (int i = 1; i <= h; i++) {
                String row = br.readLine();
                for (int j = 1; j <= w; j++) {
                    map[i][j] = row.charAt(j - 1);
                    if (map[i][j] == '$') {
                        prisoners.add(new int[]{i, j});
                    }
                }
            }

            bfs(0, 0, 0);  // Starting from the outside
            bfs(prisoners.get(0)[0], prisoners.get(0)[1], 1);  // First prisoner
            bfs(prisoners.get(1)[0], prisoners.get(1)[1], 2);  // Second prisoner

            int minDoors = Integer.MAX_VALUE;
            for (int i = 0; i <= h + 1; i++) {
                for (int j = 0; j <= w + 1; j++) {
                    if (map[i][j] != '*') {
                        int totalDoors = dist[0][i][j] + dist[1][i][j] + dist[2][i][j];
                        if (map[i][j] == '#') totalDoors -= 2;
                        minDoors = Math.min(minDoors, totalDoors);
                    }
                }
            }

            sb.append(minDoors).append("\n");
        }

        System.out.print(sb);
    }

    static void bfs(int startX, int startY, int index) {
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        boolean[][] visited = new boolean[h + 2][w + 2];
        queue.offer(new int[]{startX, startY, 0});
        dist[index][startX][startY] = 0;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];
            int doors = current[2];

            if (visited[x][y]) continue;
            visited[x][y] = true;

            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];

                if (nx >= 0 && ny >= 0 && nx < h + 2 && ny < w + 2 && map[nx][ny] != '*') {
                    int newDoors = doors + (map[nx][ny] == '#' ? 1 : 0);
                    if (dist[index][nx][ny] > newDoors) {
                        dist[index][nx][ny] = newDoors;
                        queue.offer(new int[]{nx, ny, newDoors});
                    }
                }
            }
        }
    }
}
