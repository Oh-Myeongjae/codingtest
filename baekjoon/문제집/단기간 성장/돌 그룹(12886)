/*
문제
오늘 강호는 돌을 이용해 재미있는 게임을 하려고 한다. 먼저, 돌은 세 개의 그룹으로 나누어져 있으며 각각의 그룹에는 돌이 A, B, C개가 있다. 강호는 모든 그룹에 있는 돌의 개수를 같게 만들려고 한다.

강호는 돌을 단계별로 움직이며, 각 단계는 다음과 같이 이루어져 있다.

크기가 같지 않은 두 그룹을 고른다. 그 다음, 돌의 개수가 작은 쪽을 X, 큰 쪽을 Y라고 정한다. 그 다음, X에 있는 돌의 개수를 X+X개로, Y에 있는 돌의 개수를 Y-X개로 만든다.

A, B, C가 주어졌을 때, 강호가 돌을 같은 개수로 만들 수 있으면 1을, 아니면 0을 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 A, B, C가 주어진다. (1 ≤ A, B, C ≤ 500)

출력
돌을 같은 개수로 만들 수 있으면 1을, 아니면 0을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static boolean[][] visited = new boolean[1501][1501];
    static int sum;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());
        int c = Integer.parseInt(st.nextToken());

        sum = a + b + c;

        // 총합이 3의 배수가 아니면 불가능
        if (sum % 3 != 0) {
            System.out.println(0);
            return;
        }

        // BFS 탐색 시작
        if (bfs(a, b, c)) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
    }

    static boolean bfs(int a, int b, int c) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{a, b, c});
        visited[a][b] = true;

        while (!queue.isEmpty()) {
            int[] stones = queue.poll();
            int x = stones[0];
            int y = stones[1];
            int z = stones[2];

            // 세 개가 모두 같아지면 성공
            if (x == y && y == z) return true;

            // 가능한 경우의 수 탐색
            int[][] next = {{x, y}, {y, z}, {z, x}};
            for (int[] pair : next) {
                int nx = pair[0];
                int ny = pair[1];
                if (nx != ny) {
                    if (nx < ny) {
                        ny -= nx;
                        nx += nx;
                    } else {
                        nx -= ny;
                        ny += ny;
                    }

                    int nz = sum - (nx + ny);

                    // 정렬하여 상태 정규화
                    int[] newState = {nx, ny, nz};
                    Arrays.sort(newState);

                    nx = newState[0];
                    ny = newState[1];
                    nz = newState[2];

                    // 방문하지 않은 상태만 탐색
                    if (!visited[nx][ny]) {
                        visited[nx][ny] = true;
                        queue.add(new int[]{nx, ny, nz});
                    }
                }
            }
        }
        return false;
    }
}
