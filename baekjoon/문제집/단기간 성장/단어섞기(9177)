/*
문제
세 개의 단어가 주어졌을때, 꿍은 첫 번째 단어와 두 번째 단어를 섞어서 세 번째 단어를 만들 수 있는지 궁금해졌다. 첫 번째와 두 번째 단어는 마음대로 섞어도 되지만 원래의 순서는 섞여서는 안 된다. 다음과 같은 경우를 생각해보자.

첫 번째 단어 : cat
두 번째 단어 : tree
세 번째 단어 : tcraete
보면 알 수 있듯이, 첫 번째 단어와 두 번째 단어를 서로 섞어서 세 번째 단어를 만들 수 있다. 아래와 같이 두 번째 예를 들어보자.

첫 번째 단어 : cat
두 번째 단어 : tree
세 번째 단어 : catrtee
이 경우 역시 가능하다. 그렇다면 "cat"과 "tree"로 "cttaree"를 형성하는건 불가능하다는걸 눈치챘을 것이다.

입력
입력의 첫 번째 줄에는 1부터 1000까지의 양의 정수 하나가 주어지며 데이터 집합의 개수를 뜻한다. 각 데이터집합의 처리과정은 동일하다고 하자. 각 데이터집합에 대해, 세 개의 단어로 이루어져 있으며 공백으로 구분된다. 모든 단어는 대문자 또는 소문자로만 구성되어 있다. 세 번째 단어의 길이는 항상 첫 번째 단어와 두 번째 단어의 길이의 합이며 첫 번째 단어와 두 번째 단어의 길이는 1~200이다.

출력
각 데이터집합에 대해 다음과 같이 출력하라.

만약 첫 번째 단어와 두 번째 단어로 세 번째 단어를 형성할 수 있다면

Data set n: yes
과 같이 출력하고 만약 아니라면

Data set n: no
과 같이 출력하라. 물론 n은 데이터집합의 순번으로 바뀌어야 한다. 아래의 예제 출력을 참고하라.
*/
import java.io.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int testCase = Integer.parseInt(br.readLine());
        
        for (int t = 1; t <= testCase; t++) {
            String[] words = br.readLine().split(" ");
            String s1 = words[0];
            String s2 = words[1];
            String target = words[2];
            
            if (canForm(s1, s2, target)) {
                System.out.println("Data set " + t + ": yes");
            } else {
                System.out.println("Data set " + t + ": no");
            }
        }
    }
    
    private static boolean canForm(String s1, String s2, String target) {
        int len1 = s1.length(), len2 = s2.length();
        
        if (len1 + len2 != target.length()) {
            return false;
        }
        
        boolean[][] dp = new boolean[len1 + 1][len2 + 1];
        dp[0][0] = true;
        
        // 첫 번째 단어만 사용해 타겟을 만들 수 있는지 확인
        for (int i = 1; i <= len1; i++) {
            if (s1.charAt(i - 1) == target.charAt(i - 1)) {
                dp[i][0] = dp[i - 1][0];
            }
        }
        
        // 두 번째 단어만 사용해 타겟을 만들 수 있는지 확인
        for (int j = 1; j <= len2; j++) {
            if (s2.charAt(j - 1) == target.charAt(j - 1)) {
                dp[0][j] = dp[0][j - 1];
            }
        }
        
        // DP 점화식 적용
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                char targetChar = target.charAt(i + j - 1);
                if (s1.charAt(i - 1) == targetChar) {
                    dp[i][j] |= dp[i - 1][j];
                }
                if (s2.charAt(j - 1) == targetChar) {
                    dp[i][j] |= dp[i][j - 1];
                }
            }
        }
        
        return dp[len1][len2];
    }
}
