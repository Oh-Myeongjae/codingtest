/*
문제
러시아 가스를 크로아티아로 운반하기 위해 자그레브와 모스코바는 파이프라인을 디자인하고 있다. 두 사람은 실제 디자인을 하기 전에 파이프 매니아 게임을 이용해서 설계를 해보려고 한다.

이 게임에서 유럽은 R행 C열로 나누어져 있다. 각 칸은 비어있거나, 아래 그림과 같은 일곱가지 기본 블록으로 이루어져 있다.

						
블록 '|'	블록 '-'	블록 '+'	블록 '1'	블록 '2'	블록 '3'	블록 '4'
가스는 모스크바에서 자그레브로 흐른다. 가스는 블록을 통해 양방향으로 흐를 수 있다. '+'는 특별한 블록으로, 아래 예시처럼 두 방향 (수직, 수평)으로 흘러야 한다.



파이프 라인의 설계를 마친 후 두 사람은 잠시 저녁을 먹으러 갔다. 그 사이 해커가 침임해 블록 하나를 지웠다. 지운 블록은 빈 칸이 되어있다.

해커가 어떤 칸을 지웠고, 그 칸에는 원래 어떤 블록이 있었는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 유럽의 크기 R과 C가 주어진다. (1 ≤ R, C ≤ 25)

다음 R개 줄에는 C개 글자가 주어지며, 다음과 같은 글자로 이루어져 있다.

빈칸을 나타내는 '.'
블록을 나타내는 '|'(아스키 124), '-','+','1','2','3','4'
모스크바의 위치를 나타내는 'M'과 자그레브를 나타내는 'Z'. 두 글자는 한 번만 주어진다.
항상 답이 존재하고, 가스의 흐름이 유일한 경우만 입력으로 주어진다, 또, 모스크바와 자그레브가 하나의 블록과 인접해 있는 입력만 주어진다. 또, 불필요한 블록이 존재하지 않는다. 즉, 없어진 블록을 추가하면, 모든 블록에 가스가 흐르게 된다.

출력
지워진 블록의 행과 열 위치를 출력하고, 어떤 블록이었는지를 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int R, C;
    static char[][] map;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static char[] pipeTypes = {'|', '-', '+', '1', '2', '3', '4'};
    static int missingX, missingY;
    
    static char findMissingPipe() {
        // 가능한 블록들
        for (char pipe : pipeTypes) {
            map[missingX][missingY] = pipe;
            if (isValidPipeline()) {
                return pipe;
            }
        }
        return '.';
    }

    static boolean isValidPipeline() {
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[R][C];

        // M 위치 찾기
        int startX = 0, startY = 0;
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (map[i][j] == 'M') {
                    startX = i;
                    startY = j;
                    break;
                }
            }
        }

        queue.add(new int[]{startX, startY});
        visited[startX][startY] = true;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];

            for (int d = 0; d < 4; d++) {
                int nx = x + dx[d];
                int ny = y + dy[d];

                if (nx < 0 || ny < 0 || nx >= R || ny >= C || visited[nx][ny] || map[nx][ny] == '.')
                    continue;

                if (canConnect(map[x][y], map[nx][ny], d)) {
                    visited[nx][ny] = true;
                    queue.add(new int[]{nx, ny});
                }
            }
        }

        // Z까지 도달했는지 확인
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (map[i][j] == 'Z' && visited[i][j]) return true;
            }
        }
        return false;
    }

    static boolean canConnect(char from, char to, int dir) {
        if (to == '.') return false;

        if (dir == 0) return from == '|' || from == '+' || from == '1' || from == '4';
        if (dir == 1) return from == '|' || from == '+' || from == '2' || from == '3';
        if (dir == 2) return from == '-' || from == '+' || from == '1' || from == '2';
        if (dir == 3) return from == '-' || from == '+' || from == '3' || from == '4';

        return false;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        map = new char[R][C];

        for (int i = 0; i < R; i++) {
            String line = br.readLine();
            for (int j = 0; j < C; j++) {
                map[i][j] = line.charAt(j);
                if (map[i][j] == '.') {
                    missingX = i;
                    missingY = j;
                }
            }
        }

        char missingPipe = findMissingPipe();
        System.out.println((missingX + 1) + " " + (missingY + 1) + " " + missingPipe);
    }
}
