/*
문제
로고는 주로 교육용에 쓰이는 프로그래밍 언어이다. 로고의 가장 큰 특징은 거북이 로봇인데, 사용자는 이 거북이 로봇을 움직이는 명령을 입력해 화면에 도형을 그릴 수 있다.

거북이는 위치와 각도로 표현할 수 있다. 거북이는 입에 연필을 물고 있는데, 연필을 내리면 움직일 때 화면에 선을 그리고, 올리면 선을 그리지 않고 그냥 지나가기만 한다.

제일 처음에 거북이는 (0,0)에 있고, 거북이가 보고 있는 방향은 y축이 증가하는 방향이다. 또한 연필은 내리고 있다.

사용자는 다음과 같은 다섯가지 명령으로 거북이를 조정할 수 있다.

FD x: 거북이를 x만큼 앞으로 전진
LT a: 거북이를 반시계 방향으로 a도 만큼 회전
RT a: 거북이를 시계 방향으로 a도 만큼 회전
PU: 연필을 올린다
PD: 연필을 내린다.
축에 평행한 직사각형 N개가 주어졌을 때, 이 직사각형을 그리는데 필요한 PU 명령의 최솟값을 구하는 프로그램을 작성하시오.

거북이는 같은 선을 여러 번 그릴 수 있지만, 문제에 주어진 직사각형 N개를 제외한 어떤 것도 그릴 수 없다. 거북이의 크기는 아주 작아서 좌표 평면의 한 점이라고 생각하면 된다. 직사각형의 변은 축에 평행하다.

입력
첫째 줄에 직사각형의 개수 N이 주어진다. (1 ≤ N ≤ 1000)

다음 N개의 줄에는 직사각형의 좌표 x1, y1, x2, y2가 주어진다. (−500 ≤ x1 < x2 ≤ 500), (−500 ≤ y1 < y2 ≤ 500) (x1, y1)는 직사각형의 한 꼭짓점 좌표이고, (x2, y2)는 그 점의 대각선 방향의 반대 꼭짓점의 좌표이다.

출력
N개의 직사각형을 그리는 필요한 PU명령의 최솟값을 출력한다.
*/
import java.io.*;
import java.util.*;

// Main 클래스
public class Main {
    // Segment 클래스: 직사각형의 변 (선분)을 나타냄
    static class Segment {
        int x1, y1, x2, y2;
        boolean horizontal; // true면 수평선분, false면 수직선분

        public Segment(int x1, int y1, int x2, int y2) {
            // 선분을 정규화: 수평이면 왼쪽 좌표가, 수직이면 아래쪽 좌표가 먼저 오도록 한다.
            if (y1 == y2) { // 수평 선분
                this.horizontal = true;
                if (x1 <= x2) {
                    this.x1 = x1; this.x2 = x2;
                } else {
                    this.x1 = x2; this.x2 = x1;
                }
                this.y1 = y1; this.y2 = y2;
            } else { // 수직 선분
                this.horizontal = false;
                if (y1 <= y2) {
                    this.y1 = y1; this.y2 = y2;
                } else {
                    this.y1 = y2; this.y2 = y1;
                }
                this.x1 = x1; this.x2 = x2;
            }
        }
        
        // (x, y)가 이 선분 위에 있는지 확인하는 함수
        public boolean isOnSegment(int x, int y) {
            if (horizontal) {
                // 수평이면 y좌표가 같고, x가 선의 범위 내에 있어야 함
                return y == y1 && x >= x1 && x <= x2;
            } else {
                // 수직이면 x좌표가 같고, y가 선의 범위 내에 있어야 함
                return x == x1 && y >= y1 && y <= y2;
            }
        }
    }
    
    // Union-Find (Disjoint Set) 구조 구현
    static class UnionFind {
        int[] parent;
        int[] rank;
        
        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                rank[i] = 0;
            }
        }
        
        // find 함수: 대표 원소를 찾음 (경로 압축 적용)
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        
        // union 함수: 두 원소의 집합을 합침 (랭크에 따라 합침)
        public void union(int x, int y) {
            int rx = find(x);
            int ry = find(y);
            if (rx == ry) return;
            if (rank[rx] < rank[ry]) {
                parent[rx] = ry;
            } else if (rank[rx] > rank[ry]) {
                parent[ry] = rx;
            } else {
                parent[ry] = rx;
                rank[rx]++;
            }
        }
    }
    
    // 두 선분이 연결되어 있는지 체크하는 함수
    // 즉, 두 선분이 접하거나 교차하는 경우를 확인한다.
    static boolean areConnected(Segment s, Segment t) {
        // 같은 방향인 경우: 수평 또는 수직
        if (s.horizontal && t.horizontal) {
            // 같은 y좌표에서 x범위가 겹치는 경우
            if (s.y1 == t.y1) {
                return !(s.x2 < t.x1 || t.x2 < s.x1);
            }
        } else if (!s.horizontal && !t.horizontal) {
            // 수직: 같은 x좌표에서 y범위가 겹치는 경우
            if (s.x1 == t.x1) {
                return !(s.y2 < t.y1 || t.y2 < s.y1);
            }
        } else {
            // 한 선분은 수평, 한 선분은 수직인 경우
            Segment horizontalSeg = s.horizontal ? s : t;
            Segment verticalSeg = s.horizontal ? t : s;
            // 수평 선분의 y가 수직 선분의 y범위 내에 있고,
            // 수직 선분의 x가 수평 선분의 x범위 내에 있는 경우
            if (verticalSeg.x1 >= horizontalSeg.x1 && verticalSeg.x1 <= horizontalSeg.x2 &&
                horizontalSeg.y1 >= verticalSeg.y1 && horizontalSeg.y1 <= verticalSeg.y2) {
                return true;
            }
        }
        return false;
    }
    
    // 메인 함수
    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String line;
            // 테스트 케이스를 EOF까지 반복 처리
            while ((line = br.readLine()) != null) {
                line = line.trim();
                // 빈 줄 혹은 구분선(====)인 경우 무시
                if (line.isEmpty() || line.startsWith("=")) continue;
                
                // 첫 번째 줄: 직사각형 개수 N
                int N = Integer.parseInt(line);
                // 선분들을 저장할 리스트 (각 직사각형마다 4개의 선분)
                ArrayList<Segment> segments = new ArrayList<>();
                
                // N개의 직사각형 데이터를 읽어서 4개의 선분으로 변환
                for (int i = 0; i < N; i++) {
                    String[] parts = br.readLine().trim().split("\\s+");
                    int x1 = Integer.parseInt(parts[0]);
                    int y1 = Integer.parseInt(parts[1]);
                    int x2 = Integer.parseInt(parts[2]);
                    int y2 = Integer.parseInt(parts[3]);
                    // 각 직사각형의 네 변
                    // 아래쪽 변
                    segments.add(new Segment(x1, y1, x2, y1));
                    // 오른쪽 변
                    segments.add(new Segment(x2, y1, x2, y2));
                    // 위쪽 변
                    segments.add(new Segment(x2, y2, x1, y2));
                    // 왼쪽 변
                    segments.add(new Segment(x1, y2, x1, y1));
                }
                
                int M = segments.size();
                UnionFind uf = new UnionFind(M);
                
                // 모든 선분 쌍에 대해 연결 여부를 확인하고 union을 수행함
                for (int i = 0; i < M; i++) {
                    for (int j = i + 1; j < M; j++) {
                        if (areConnected(segments.get(i), segments.get(j))) {
                            uf.union(i, j);
                        }
                    }
                }
                
                // 각 연결 요소(컴포넌트) 별로 시작점 (0,0)을 포함하는지 체크
                HashMap<Integer, Boolean> compHasStart = new HashMap<>();
                // 각 선분에 대해 시작점을 포함하는지 확인
                for (int i = 0; i < M; i++) {
                    int rep = uf.find(i);
                    if (segments.get(i).isOnSegment(0, 0)) {
                        compHasStart.put(rep, true);
                    } else {
                        if (!compHasStart.containsKey(rep)) {
                            compHasStart.put(rep, false);
                        }
                    }
                }
                
                // 서로 다른 컴포넌트들의 대표 집합을 구함
                HashSet<Integer> compSet = new HashSet<>();
                for (int i = 0; i < M; i++) {
                    compSet.add(uf.find(i));
                }
                
                int numComponents = compSet.size();
                // 시작점 (0,0)이 포함된 컴포넌트가 있다면, 그 컴포넌트는 초기 펜다운 상태로 그릴 수 있음
                boolean hasStart = false;
                for (int rep : compSet) {
                    if (compHasStart.getOrDefault(rep, false)) {
                        hasStart = true;
                        break;
                    }
                }
                
                // 최소 PU 명령 횟수 계산
                int result = hasStart ? numComponents - 1 : numComponents;
                System.out.println(result);
            }
        } catch (IOException e) {
            // 예외 처리
            e.printStackTrace();
        }
    }
}

