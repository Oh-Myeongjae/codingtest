/*
문제
전기 회로에서 두 점을 전선으로 이을 때, 길이는 짧을 수록 좋다.

크기가 N×M인 비어있는 회로판에서 두 점 A1과 A2, 그리고 B1와 B2를 전선을 이용해서 이으려고 한다. 전선은 항상 그리드의 수직, 수평선 위에 있어야 한다. 또, 두 직선은 접하면 안 된다. 이 경우에 필요한 전선의 길이의 최솟값을 구하는 프로그램을 작성하시오. 전선은 회로판 바깥으로 나갈 수 없다.

입력
첫째 줄에 회로판의 크기 N과 M이 주어진다. (2 ≤ N, M ≤ 100) 

다음 네 줄에는 A1, A2, B1, B2의 좌표가 주어진다. 점의 좌표는 두 정수의 쌍으로 이루어져 있고, 첫 번째 좌표는 0 이상 N 이하이며 두 번째 좌표는 0 이상 M 이하이다. 어떤 점도 같은 위치에 있지 않다.

출력
A1과 A2, 그리고 B1과 B2를 연결하는데 필요한 전선의 길이의 최솟값을 출력한다. 만약, 불가능한 경우에는 "IMPOSSIBLE"을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int N, M;
    static int[][] board;
    static int[] dx = {-1, 1, 0, 0}; // 상, 하, 좌, 우
    static int[] dy = {0, 0, -1, 1};

    static class Point {
        int x, y, dist;
        Point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        board = new int[N + 1][M + 1];

        int[][] points = new int[4][2];
        for (int i = 0; i < 4; i++) {
            st = new StringTokenizer(br.readLine());
            points[i][0] = Integer.parseInt(st.nextToken());
            points[i][1] = Integer.parseInt(st.nextToken());
        }

        // 첫 번째 전선(A1 → A2)을 먼저 놓고 그 경로를 막음
        int wire1 = bfs(points[0][0], points[0][1], points[1][0], points[1][1], 1);
        if (wire1 == -1) {
            System.out.println("IMPOSSIBLE");
            return;
        }

        // 두 번째 전선(B1 → B2)을 찾음 (첫 번째 전선을 피해야 함)
        int wire2 = bfs(points[2][0], points[2][1], points[3][0], points[3][1], 2);
        if (wire2 == -1) {
            System.out.println("IMPOSSIBLE");
            return;
        }

        // 두 전선의 총 길이 출력
        System.out.println(wire1 + wire2);
    }

    // BFS를 이용한 최단 경로 탐색
    static int bfs(int sx, int sy, int ex, int ey, int mark) {
        boolean[][] visited = new boolean[N + 1][M + 1];
        Queue<Point> queue = new LinkedList<>();
        queue.add(new Point(sx, sy, 0));
        visited[sx][sy] = true;

        while (!queue.isEmpty()) {
            Point p = queue.poll();

            if (p.x == ex && p.y == ey) {
                markWire(sx, sy, ex, ey, mark);
                return p.dist;
            }

            for (int i = 0; i < 4; i++) {
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];

                if (nx >= 0 && nx <= N && ny >= 0 && ny <= M && !visited[nx][ny] && board[nx][ny] == 0) {
                    visited[nx][ny] = true;
                    queue.add(new Point(nx, ny, p.dist + 1));
                }
            }
        }

        return -1; // 연결 불가능
    }

    // 최단 경로를 따라 전선을 표시하여, 두 번째 전선이 겹치지 않도록 함
    static void markWire(int sx, int sy, int ex, int ey, int mark) {
        Queue<Point> queue = new LinkedList<>();
        boolean[][] visited = new boolean[N + 1][M + 1];
        queue.add(new Point(sx, sy, 0));
        visited[sx][sy] = true;
        board[sx][sy] = mark;

        while (!queue.isEmpty()) {
            Point p = queue.poll();

            if (p.x == ex && p.y == ey) return;

            for (int i = 0; i < 4; i++) {
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];

                if (nx >= 0 && nx <= N && ny >= 0 && ny <= M && !visited[nx][ny] && board[nx][ny] == 0) {
                    visited[nx][ny] = true;
                    board[nx][ny] = mark;
                    queue.add(new Point(nx, ny, p.dist + 1));
                }
            }
        }
    }
}
