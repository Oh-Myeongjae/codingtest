/*
문제
세준이는 N개의 물건을 가지고 있고, 최대 C만큼의 무게를 넣을 수 있는 가방을 하나 가지고 있다.

N개의 물건을 가방에 넣는 방법의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N과 C가 주어진다. N은 30보다 작거나 같은 자연수, C는 109보다 작거나 같은 음이 아닌 정수이다. 둘째 줄에 물건의 무게가 주어진다. 무게도 109보다 작거나 같은 자연수이다.

출력
첫째 줄에 가방에 넣는 방법의 수를 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        int N = Integer.parseInt(st.nextToken()); // 물건의 개수
        int C = Integer.parseInt(st.nextToken()); // 최대 무게
        
        int[] weights = new int[N];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            weights[i] = Integer.parseInt(st.nextToken());
        }
        
        // 두 개의 그룹으로 나누어 처리
        List<Integer> leftSums = new ArrayList<>();
        List<Integer> rightSums = new ArrayList<>();
        
        // 왼쪽 절반의 합 계산
        calculateSums(weights, 0, N / 2, 0, leftSums);
        // 오른쪽 절반의 합 계산
        calculateSums(weights, N / 2, N, 0, rightSums);
        
        // 오른쪽 합을 정렬
        Collections.sort(rightSums);
        
        long count = 0;
        
        // 왼쪽 합에 대해 가능한 오른쪽 합 탐색
        for (int sum : leftSums) {
            if (sum > C) continue; // 이미 무게를 초과한 경우
            int remaining = C - sum;
            count += upperBound(rightSums, remaining); // 가능한 경우의 수 추가
        }
        
        System.out.println(count);
    }
    
    // 부분 집합의 합 계산 함수
    private static void calculateSums(int[] weights, int start, int end, int currentSum, List<Integer> sums) {
        if (start == end) {
            sums.add(currentSum);
            return;
        }
        // 현재 물건을 포함하지 않는 경우
        calculateSums(weights, start + 1, end, currentSum, sums);
        // 현재 물건을 포함하는 경우
        calculateSums(weights, start + 1, end, currentSum + weights[start], sums);
    }
    
    // upper bound 찾기 (남은 무게 이하의 합의 개수 계산)
    private static int upperBound(List<Integer> list, int value) {
        int low = 0, high = list.size();
        while (low < high) {
            int mid = (low + high) / 2;
            if (list.get(mid) <= value) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
