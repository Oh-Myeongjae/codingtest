/*
문제
방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.

세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라. 1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 E가 주어진다. (2 ≤ N ≤ 800, 0 ≤ E ≤ 200,000) 둘째 줄부터 E개의 줄에 걸쳐서 세 개의 정수 a, b, c가 주어지는데, a번 정점에서 b번 정점까지 양방향 길이 존재하며, 그 거리가 c라는 뜻이다. (1 ≤ c ≤ 1,000) 다음 줄에는 반드시 거쳐야 하는 두 개의 서로 다른 정점 번호 v1과 v2가 주어진다. (v1 ≠ v2, v1 ≠ N, v2 ≠ 1) 임의의 두 정점 u와 v사이에는 간선이 최대 1개 존재한다.

출력
첫째 줄에 두 개의 정점을 지나는 최단 경로의 길이를 출력한다. 그러한 경로가 없을 때에는 -1을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {

    static final int INF = 200000000; // 매우 큰 값 (무한대)

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        int N = Integer.parseInt(st.nextToken()); // 정점의 개수
        int E = Integer.parseInt(st.nextToken()); // 간선의 개수
        
        List<int[]>[] graph = new ArrayList[N + 1]; // 그래프 인접 리스트
        for (int i = 1; i <= N; i++) {
            graph[i] = new ArrayList<>();
        }
        
        // 간선 입력
        for (int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            graph[a].add(new int[]{b, c}); // a -> b로 가는 비용 c
            graph[b].add(new int[]{a, c}); // b -> a로 가는 비용 c (양방향)
        }
        
        // 반드시 거쳐야 하는 두 정점 v1, v2
        st = new StringTokenizer(br.readLine());
        int v1 = Integer.parseInt(st.nextToken());
        int v2 = Integer.parseInt(st.nextToken());
        
        // 1. 다익스트라로 각각의 최단 거리 구하기
        int[] distFrom1 = dijkstra(1, N, graph);  // 1번 정점에서의 최단 거리
        int[] distFromV1 = dijkstra(v1, N, graph); // v1에서의 최단 거리
        int[] distFromV2 = dijkstra(v2, N, graph); // v2에서의 최단 거리
        
        // 2. 두 경로의 최단 거리 계산
        long path1 = (long) distFrom1[v1] + distFromV1[v2] + distFromV2[N]; // 1 -> v1 -> v2 -> N
        long path2 = (long) distFrom1[v2] + distFromV2[v1] + distFromV1[N]; // 1 -> v2 -> v1 -> N
        
        // 3. 경로가 존재하지 않으면 INF로 계산될 것이므로, 이를 처리
        long result = Math.min(path1, path2);
        if (result >= INF) {
            System.out.println(-1); // 경로가 존재하지 않는 경우
        } else {
            System.out.println(result); // 최단 경로 출력
        }
    }

    // 다익스트라 알고리즘
    public static int[] dijkstra(int start, int N, List<int[]>[] graph) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(o -> o[1]));
        int[] dist = new int[N + 1];
        Arrays.fill(dist, INF);
        dist[start] = 0;
        pq.add(new int[]{start, 0});
        
        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            int currentNode = current[0];
            int currentDist = current[1];
            
            if (currentDist > dist[currentNode]) {
                continue;
            }
            
            for (int[] neighbor : graph[currentNode]) {
                int nextNode = neighbor[0];
                int weight = neighbor[1];
                
                if (dist[nextNode] > dist[currentNode] + weight) {
                    dist[nextNode] = dist[currentNode] + weight;
                    pq.add(new int[]{nextNode, dist[nextNode]});
                }
            }
        }
        
        return dist;
    }
}
