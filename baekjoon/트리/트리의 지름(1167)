/*
문제
트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다. 트리의 지름을 구하는 프로그램을 작성하시오.

입력
트리가 입력으로 주어진다. 먼저 첫 번째 줄에서는 트리의 정점의 개수 V가 주어지고 (2 ≤ V ≤ 100,000)둘째 줄부터 V개의 줄에 걸쳐 간선의 정보가 다음과 같이 주어진다. 정점 번호는 1부터 V까지 매겨져 있다.

먼저 정점 번호가 주어지고, 이어서 연결된 간선의 정보를 의미하는 정수가 두 개씩 주어지는데, 하나는 정점번호, 다른 하나는 그 정점까지의 거리이다. 예를 들어 네 번째 줄의 경우 정점 3은 정점 1과 거리가 2인 간선으로 연결되어 있고, 정점 4와는 거리가 3인 간선으로 연결되어 있는 것을 보여준다. 각 줄의 마지막에는 -1이 입력으로 주어진다. 주어지는 거리는 모두 10,000 이하의 자연수이다.

출력
첫째 줄에 트리의 지름을 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static List<Node>[] tree;
    static boolean[] visited;
    static int maxDist = 0;
    static int farthestNode = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int V = Integer.parseInt(br.readLine()); // 트리의 정점 개수

        tree = new ArrayList[V + 1]; // 1-based indexing
        visited = new boolean[V + 1];

        for (int i = 1; i <= V; i++) {
            tree[i] = new ArrayList<>();
        }

        // 간선 정보 입력 받기
        for (int i = 0; i < V; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int from = Integer.parseInt(st.nextToken());

            while (true) {
                int to = Integer.parseInt(st.nextToken());
                if (to == -1) break;
                int dist = Integer.parseInt(st.nextToken());
                tree[from].add(new Node(to, dist));
            }
        }

        // 1번 정점에서 가장 먼 노드 찾기 (첫 번째 DFS)
        dfs(1, 0);

        // 가장 먼 노드를 찾았으니, 해당 노드에서 다시 가장 먼 노드를 찾기 (두 번째 DFS)
        Arrays.fill(visited, false); // 방문 배열 초기화
        dfs(farthestNode, 0);

        // 트리의 지름 출력
        System.out.println(maxDist);
    }

    // DFS 함수
    static void dfs(int node, int dist) {
        visited[node] = true;

        // 현재까지의 거리가 최대 거리보다 크다면 갱신
        if (dist > maxDist) {
            maxDist = dist;
            farthestNode = node;
        }

        // 연결된 노드들을 순회하며 DFS 수행
        for (Node next : tree[node]) {
            if (!visited[next.to]) {
                dfs(next.to, dist + next.weight);
            }
        }
    }

    // 간선을 나타내는 클래스
    static class Node {
        int to, weight;

        Node(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }
}
