/*
문제
루트 없는 트리가 주어진다. 이때, 트리의 루트를 1이라고 정했을 때, 각 노드의 부모를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 노드의 개수 N (2 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N-1개의 줄에 트리 상에서 연결된 두 정점이 주어진다.

출력
첫째 줄부터 N-1개의 줄에 각 노드의 부모 노드 번호를 2번 노드부터 순서대로 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static List<List<Integer>> tree = new ArrayList<>();
    static int[] parents; // 각 노드의 부모를 저장할 배열
    static boolean[] visited; // 방문 여부를 체크할 배열

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine()); // 노드의 개수

        parents = new int[n + 1];
        visited = new boolean[n + 1];

        // 트리 초기화
        for (int i = 0; i <= n; i++) {
            tree.add(new ArrayList<>());
        }

        // 트리 간선 입력
        for (int i = 0; i < n - 1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            tree.get(u).add(v);
            tree.get(v).add(u);
        }

        // DFS로 각 노드의 부모 찾기
        dfs(1); // 1번 노드를 루트로 설정

        // 2번 노드부터 n번 노드까지 부모 출력
        StringBuilder sb = new StringBuilder();
        for (int i = 2; i <= n; i++) {
            sb.append(parents[i]).append("\n");
        }
        System.out.print(sb);
    }

    // DFS 탐색 함수
    static void dfs(int node) {
        visited[node] = true;
        for (int child : tree.get(node)) {
            if (!visited[child]) {
                parents[child] = node; // 부모 설정
                dfs(child);
            }
        }
    }
}
