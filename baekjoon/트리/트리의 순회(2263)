/*
문제
n개의 정점을 갖는 이진 트리의 정점에 1부터 n까지의 번호가 중복 없이 매겨져 있다. 이와 같은 이진 트리의 인오더와 포스트오더가 주어졌을 때, 프리오더를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 n(1 ≤ n ≤ 100,000)이 주어진다. 다음 줄에는 인오더를 나타내는 n개의 자연수가 주어지고, 그 다음 줄에는 같은 식으로 포스트오더가 주어진다.

출력
첫째 줄에 프리오더를 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    static int[] inorder;   // 인오더 배열
    static int[] postorder; // 포스트오더 배열
    static int[] indexMap;  // 인오더에서의 인덱스 위치 저장
    static StringBuilder sb = new StringBuilder(); // 결과 출력용

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine()); // 노드 개수

        inorder = new int[n];
        postorder = new int[n];
        indexMap = new int[n + 1]; // 각 값의 인덱스 저장 (1-based)

        // 인오더 입력
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            inorder[i] = Integer.parseInt(st.nextToken());
        }

        // 포스트오더 입력
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            postorder[i] = Integer.parseInt(st.nextToken());
        }

        // 인오더에서 각 값의 인덱스 저장
        for (int i = 0; i < n; i++) {
            indexMap[inorder[i]] = i;
        }

        // 프리오더 재귀 함수 호출 (루트부터 탐색 시작)
        getPreorder(0, n - 1, 0, n - 1);

        // 결과 출력
        System.out.println(sb.toString());
    }

    // 프리오더 구하기 (재귀)
    public static void getPreorder(int inStart, int inEnd, int postStart, int postEnd) {
        if (inStart > inEnd || postStart > postEnd) return; // 범위를 벗어나면 종료

        // 포스트오더의 마지막 값이 현재 서브트리의 루트
        int root = postorder[postEnd];
        sb.append(root).append(" "); // 프리오더 출력

        // 인오더에서 루트의 위치를 찾음
        int rootIndex = indexMap[root];
        int leftSize = rootIndex - inStart; // 왼쪽 서브트리의 크기

        // 왼쪽 서브트리 재귀 호출
        getPreorder(inStart, rootIndex - 1, postStart, postStart + leftSize - 1);

        // 오른쪽 서브트리 재귀 호출
        getPreorder(rootIndex + 1, inEnd, postStart + leftSize, postEnd - 1);
    }
}
