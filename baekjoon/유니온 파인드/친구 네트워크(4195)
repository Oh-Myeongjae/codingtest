/*
문제
민혁이는 소셜 네트워크 사이트에서 친구를 만드는 것을 좋아하는 친구이다. 우표를 모으는 취미가 있듯이, 민혁이는 소셜 네트워크 사이트에서 친구를 모으는 것이 취미이다.

어떤 사이트의 친구 관계가 생긴 순서대로 주어졌을 때, 두 사람의 친구 네트워크에 몇 명이 있는지 구하는 프로그램을 작성하시오.

친구 네트워크란 친구 관계만으로 이동할 수 있는 사이를 말한다.

입력
첫째 줄에 테스트 케이스의 개수가 주어진다. 각 테스트 케이스의 첫째 줄에는 친구 관계의 수 F가 주어지며, 이 값은 100,000을 넘지 않는다. 다음 F개의 줄에는 친구 관계가 생긴 순서대로 주어진다. 친구 관계는 두 사용자의 아이디로 이루어져 있으며, 알파벳 대문자 또는 소문자로만 이루어진 길이 20 이하의 문자열이다.

출력
친구 관계가 생길 때마다, 두 사람의 친구 네트워크에 몇 명이 있는지 구하는 프로그램을 작성하시오.
*/
import java.io.*;
import java.util.*;

public class Main {
    static Map<String, String> parent;
    static Map<String, Integer> size;

    // Find operation with path compression
    static String find(String person) {
        if (!parent.get(person).equals(person)) {
            parent.put(person, find(parent.get(person)));
        }
        return parent.get(person);
    }

    // Union operation with size tracking
    static void union(String person1, String person2) {
        String root1 = find(person1);
        String root2 = find(person2);

        if (!root1.equals(root2)) {
            int size1 = size.get(root1);
            int size2 = size.get(root2);
            parent.put(root2, root1);
            size.put(root1, size1 + size2);  // Update size of the root
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());  // Number of test cases
        StringBuilder result = new StringBuilder();

        while (T-- > 0) {
            int F = Integer.parseInt(br.readLine());  // Number of friend relations
            parent = new HashMap<>();
            size = new HashMap<>();

            for (int i = 0; i < F; i++) {
                StringTokenizer st = new StringTokenizer(br.readLine());
                String person1 = st.nextToken();
                String person2 = st.nextToken();

                // Initialize parent and size if not already present
                if (!parent.containsKey(person1)) {
                    parent.put(person1, person1);
                    size.put(person1, 1);
                }
                if (!parent.containsKey(person2)) {
                    parent.put(person2, person2);
                    size.put(person2, 1);
                }

                // Union the two persons and get the size of the resulting set
                union(person1, person2);
                result.append(size.get(find(person1))).append("\n");
            }
        }
        System.out.print(result);
    }
}
