/*
문제
수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

입력
첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (-1,000,000,000 ≤ Ai ≤ 1,000,000,000)

출력
첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

둘째 줄에는 정답이 될 수 있는 가장 긴 증가하는 부분 수열을 출력한다.
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 입력 처리
        int N = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(input[i]);
        }

        // 이분 탐색을 사용하여 LIS 길이 찾기
        List<Integer> lis = new ArrayList<>();
        List<Integer> indexList = new ArrayList<>();
        int[] predecessors = new int[N];
        
        for (int i = 0; i < N; i++) {
            int num = A[i];
            int pos = binarySearch(lis, num);
            
            if (pos >= lis.size()) {
                lis.add(num);
            } else {
                lis.set(pos, num);
            }
            
            // 기록 이전 위치
            if (pos > 0) {
                predecessors[i] = indexList.get(pos - 1);
            }
            
            if (pos == indexList.size()) {
                indexList.add(i);
            } else {
                indexList.set(pos, i);
            }
        }

        // 결과 출력
        int length = lis.size();
        System.out.println(length);
        
        // LIS 역추적
        List<Integer> result = new ArrayList<>();
        int k = indexList.get(length - 1);
        for (int i = 0; i < length; i++) {
            result.add(A[k]);
            k = predecessors[k];
        }
        Collections.reverse(result);
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
    
    private static int binarySearch(List<Integer> lis, int num) {
        int low = 0;
        int high = lis.size() - 1;
        
        while (low <= high) {
            int mid = (low + high) / 2;
            if (lis.get(mid) < num) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return low;
    }
}
