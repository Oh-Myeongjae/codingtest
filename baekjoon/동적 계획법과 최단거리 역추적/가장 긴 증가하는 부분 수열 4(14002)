/*
문제
수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

입력
첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

둘째 줄에는 가장 긴 증가하는 부분 수열을 출력한다. 그러한 수열이 여러가지인 경우 아무거나 출력한다.
*/
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        // 입력을 받기 위한 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // 첫 번째 줄: 수열의 크기 N
        int N = Integer.parseInt(br.readLine());
        
        // 두 번째 줄: 수열 A
        int[] A = new int[N];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(st.nextToken());
        }
        
        // DP 테이블과 역추적용 배열 선언
        int[] dp = new int[N]; // dp[i]는 A[i]를 마지막 원소로 하는 가장 긴 증가하는 부분 수열의 길이
        int[] prev = new int[N]; // prev[i]는 A[i] 앞에 올 수 있는 원소의 인덱스
        Arrays.fill(prev, -1); // 초기값을 -1로 설정 (이전 원소가 없는 경우)

        // DP 배열을 채우며 가장 긴 수열의 길이를 찾기
        int maxLength = 0; // 가장 긴 수열의 길이
        int lastIndex = 0; // 가장 긴 수열의 마지막 원소의 인덱스
        
        for (int i = 0; i < N; i++) {
            dp[i] = 1; // 기본적으로 자신만 포함하는 수열의 길이는 1
            
            for (int j = 0; j < i; j++) {
                if (A[j] < A[i] && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j; // 이전 인덱스 기록
                }
            }
            
            // 가장 긴 수열의 길이 갱신
            if (dp[i] > maxLength) {
                maxLength = dp[i];
                lastIndex = i; // 마지막 원소의 인덱스 기록
            }
        }
        
        // 가장 긴 증가하는 부분 수열을 역추적
        ArrayList<Integer> lis = new ArrayList<>();
        for (int i = lastIndex; i != -1; i = prev[i]) {
            lis.add(A[i]);
        }
        
        // 수열은 역순으로 구해졌으므로 순서를 뒤집음
        Collections.reverse(lis);
        
        // 결과 출력
        System.out.println(maxLength); // 가장 긴 증가하는 부분 수열의 길이
        for (int num : lis) {
            System.out.print(num + " ");
        }
    }
}
